#!/usr/bin/env bash

# if cover not found in metadata use this instead
bkpCover="$HOME/.config/eww/dashboard/img/music"

Control=""
# ┌─┐┬  ┌─┐┬ ┬┌─┐┬─┐┌─┐┌┬┐┬    ┌─┐┌─┐┬─┐┬┌─┐┌┬┐┌─┐
# ├─┘│  ├─┤└┬┘├┤ ├┬┘│   │ │    └─┐│  ├┬┘│├─┘ │ └─┐
# ┴  ┴─┘┴ ┴ ┴ └─┘┴└─└─┘ ┴ ┴─┘  └─┘└─┘┴└─┴┴   ┴ └─┘

########################## Title ##########################
title() {
	title=$(playerctl --player="$Control" metadata --format {{title}})
	[ -z "$title" ] && title="Nothing Playing"
	max_length=30
	if [ ${#title} -gt $max_length ]; then
		truncated_title="${title:0:$((max_length-3))}..."
	else
		truncated_title="$title"
	fi
	echo "$truncated_title"
}

########################## Artist ##########################
artist() {
	artist=$(playerctl --player="$Control" metadata --format {{artist}})
	[ -z "$artist" ] && artist="NaN"
	max_length=30
	if [ ${#artist} -gt $max_length ]; then
		truncated_artist="${artist:0:$((max_length-3))}..."
	else
		truncated_artist="$artist"
	fi
	echo "$truncated_artist"
}

########################## Album ##########################
album() {
	album=$(playerctl --player="$Control" metadata --format {{album}})
	[ -z "$album" ] && album="Album"
	echo "$album"
}

########################## Status ##########################
status() {
	status=$(playerctl --player="$Control" status)
	[ -z "$status" ] && status="Stopped"
	echo "$status"
}

function media-progress-bar {
  # Get the total duration of the track in seconds
  read -r TOTAL < <(playerctl -f "{{mpris:length}}" metadata)
  TOTAL="$((TOTAL / 1000000))" # Convert from microseconds to seconds

  # Get the elapsed time of the track in seconds
  read -r ELAPSED < <(playerctl position)
  ELAPSED="${ELAPSED%%.*}" # Strip milliseconds

  # Calculate the progress percentage
  PROGRESS="$(( (ELAPSED * 100) / TOTAL ))"

  # Generate the progress bar
  local FILLED="$((PROGRESS / 3))"  # Scale to a 33-character bar
  local EMPTY="$((33 - FILLED))"

  # Print the progress bar
  printf "%${FILLED}s" | tr ' ' '-' | printf -- "$(cat -)%${EMPTY}s"
}
########################## Time ##########################
position() {
	time=$(playerctl --player=$Control position --format "{{ duration(position) }}")
	[ -z "$time" ] && time="00:00"
	echo "$time"
}

positions() {
  position=$(playerctl --player=$Control metadata --format "{{ duration(position) }}")
  [ -z "$position" ] && position="00:00"
  time=$position
  if [[ $time == *:* ]]; then
    minutes=${time%%:*}
    seconds=${time#*:}
    seconds=$((${seconds#0}))
  else
    minutes=${time:0:1}
    seconds=${time:2:2}
  fi
  total_seconds=$((minutes * 60 + seconds))
  echo $total_seconds
}

########################## Length ##########################
length() {
	length=$(playerctl --player=$Control metadata --format "{{ duration(mpris:length) }}")
	[ -z "$length" ] && length="00:00"
	echo "$length"
}

lengths() {
  length=$(playerctl --player=$Control metadata --format "{{ duration(mpris:length) }}")
  [ -z "$length" ] && length="00:00"
  time=$length
  if [[ $time == *:* ]]; then
    minutes=${time%%:*}
    seconds=${time#*:}
  else
    minutes=${time:0:1}
    seconds=${time:2:2}
  fi
  total_seconds=$((minutes * 60 + seconds))
  echo $total_seconds
}

########################## trackNumber ##########################
playlist() {
	playlist=$(playerctl --player="$Control" metadata xesam:trackNumber)
	[ -z "$playlist" ] && playlist="0"
	echo "$playlist"
}

########################## Cover ##########################

cover() {

    # Generate a random temporary location for the downloaded file
    tmp_location=$(mktemp --suffix=.jpg)
    final_loc="/tmp/cover.png"

    albumart="$(playerctl metadata mpris:artUrl | sed -e 's/open.spotify.com/i.scdn.co/g')"

    # Download the album art or use the backup cover
    if [ "$(playerctl metadata mpris:artUrl )" ]; then
	    curl -s "$albumart" --output "$tmp_location"
	    # Check the file type
	    file_type=$(file --mime-type -b "$tmp_location")
	    # If it's a PNG, copy it to the cover location, otherwise convert it
	    if [ "$file_type" == "image/png" ]; then
		    cp -f "$tmp_location" "$final_loc"
	    else
		    mogrify -format png "$tmp_location"
		    mv "${tmp_location%.*}.png" "$final_loc"
	    fi
	    # Clean up the temporary file
	    rm -f "$tmp_location"
	    dimensions=$(identify -format "%w %h" "$final_loc")
	    width=$(echo "$dimensions" | awk '{print $1}')
	    height=$(echo "$dimensions" | awk '{print $2}')
	    if [ "$width" -ge "$height" ]; then
		    crop_size="$height"
	    else
		    crop_size="$width"
	    fi
	    # NOTE:Using imagemagick doesn't work when not run interactively, it seem. FFMPEG just crashes hyprlock
	    # HACK: This python stuff is the hackiest thing ever, but for some reason it works, when nothing else does
        ~/.scripts/.venv/bin/python3 - <<END
#!/usr/bin/env python3
from PIL import Image

def crop_image(input_path, output_path, crop_size):
    image = Image.open(input_path)
    width, height = image.size
    left = (width - crop_size[0]) / 2
    top = (height - crop_size[1]) / 2
    right = (width + crop_size[0]) / 2
    bottom = (height + crop_size[1]) / 2
    image = image.crop((left, top, right, bottom))
    image.save(output_path)

crop_image("$final_loc", "$final_loc", ($crop_size, $crop_size))
END
    else
	    echo "$bkpCover"
	    return
    fi
    echo "$final_loc"
    }


########################## Statusicon ##########################
statusicon() {
	icon=" "
	[ "$(playerctl --player="$Control" status)" = "Playing" ] && icon=" "
	[ "$(playerctl --player="$Control" status)" = "Paused" ] && icon=" "
	echo "$icon"
}

########################## Shuffle ##########################
shufflecolor() {
	color="#a0a0a0"
	[ "$(playerctl --player="$Control" shuffle)" = "On" ] && color="#9ec49f"
	[ "$(playerctl --player="$Control" shuffle)" = "Off" ] && color"#a0a0a0"
	echo "$color"
}

########################## Loop ##########################
loopicon() {
	icon=""
	[ "$(playerctl --player="$Control" loop)" = "None" ] && icon=""
	[ "$(playerctl --player="$Control" loop)" = "Track" ] && icon""
	[ "$(playerctl --player="$Control" loop)" = "Playlist" ] && icon=""
	echo "$icon"
}

loopcheck() {
	command=$(playerctl -p spotify loop)

	if [[ $command == "None" ]]; then
		playerctl -p spotify loop Playlist
	fi

	if [[ $command == "Playlist" ]]; then
		playerctl -p spotify loop Track
	fi

	if [[ $command == "Track" ]]; then
		playerctl -p spotify loop None
	fi
}

loopcolor() {
	color="#9ec49f"
	[ "$(playerctl --player="$Control" loop)" = "None" ] && color="#a0a0a0"
	[ "$(playerctl --player="$Control" loop)" = "Track" ] && color"#9ec49f"
	[ "$(playerctl --player="$Control" loop)" = "Playlist" ] && color"#9ec49f"
	echo "$color"
}

########################## Lyrics ##########################
lyrics() {
	Title=$(playerctl --player="$Control" metadata --format {{title}})
	Artist=$(playerctl --player="$Control" metadata --format {{artist}})
	URL="https://api.lyrics.ovh/v1/${Artist}/${Title}"
	lyrics=$(curl -s "$(echo "$URL" | sed -e s/" "/%20/g -e s/"&"/%26/g -e s/,/%2C/g -e s/-/%2D/g)" | jq '.lyrics')
	[ "$lyrics" = "null" ] && lyrics=$(curl -s --get "https://makeitpersonal.co/lyrics" --data-urlencode "artist=${Artist}" --data-urlencode "title=$Title")
	printf "%s" "$lyrics" |sed -e 's/\\n/\n/g' -e 's/\\r//g'
}

# ┬ ┬┌─┐┬  ┌─┐
# ├─┤├┤ │  ├─┘
# ┴ ┴└─┘┴─┘┴

doc() {
	echo "Usage:
  MediaControl [Options]

Options:
  --previous	previous song
  --next	next song
  --toggle	toggle between play-pause song
  --stop	stop song
  --shuffle	shuffle playlist
  --loop	loop None Playlist Track
  --json    returns all values in json format
  title		shows title of current song
  album		shows album of current song
  artist	shows artist of current song
  status	music status (playing/paused/stopped)
  statusicon	music status icons (playing/paused/stopped)
  shufflecolor	shuffle status color
  loopicon	loop status icon
  loopcolor	loop status color
  coverloc	saves cover and shows location to cover of current song
  showcover	opens cover using feh
  position		shows current position of song
  positions		shows current position of song in seconds
  length	shows length of song
  lengths	shows length of song in seconds
  playlist	shows playlist position of current song
  lyrics	shows lyrics
  progress	shows progress bar"
}

# ┌─┐┌─┐┌┬┐┬┌─┐┌┐┌┌─┐
# │ │├─┘ │ ││ ││││└─┐
# └─┘┴   ┴ ┴└─┘┘└┘└─┘

get_player_info() {
    local player_info={

    add_key_value() {
      local key=$1
      local value=$2
      local sanitized_value
      sanitized_value=$(eval "$value" 2>/dev/null || echo "N/A")
      # Remove quotes from the sanitized value
      sanitized_value=$(echo "$sanitized_value" | tr -d "'\"")
      # Check if the sanitized value is empty or contains only whitespace
      if [ -z "$(echo "$sanitized_value" | tr -d '[:space:]')" ]; then
        sanitized_value="N/A"
      fi
      player_info+="\"$key\":\"$sanitized_value\","
  }
    add_key_value title title
    add_key_value artist artist
    add_key_value album album
    add_key_value status status
    add_key_value position position
    add_key_value length length
    add_key_value playlist playlist
    add_key_value cover cover
    add_key_value statusicon statusicon
    add_key_value shufflecolor shufflecolor
    add_key_value loopicon loopicon
    add_key_value loopcolor loopcolor
    add_key_value progress media-progress-bar

    player_info=${player_info%,}  # Remove trailing comma
    player_info+=}

    echo "$player_info"
}

	case $1 in
	--next) playerctl --player="$Control" next ;;
	--previous) playerctl --player="$Control" previous ;;
	--toggle) playerctl --player="$Control" play-pause ;;
	--stop) playerctl --player="$Control" stop ;;
	--shuffle) playerctl --player="$Control" shuffle toggle ;;
	--loop) loopcheck ;;
    --json) get_player_info;;
	title) title ;;
	artist) artist ;;
	album) album ;;
	status) status ;;
	statusicon) statusicon ;;
	shufflecolor) shufflecolor ;;
	loopicon) loopicon ;;
	loopcolor) loopcolor ;;
	player) echo "$Control" ;;
	coverloc) cover ;;
	showcover) cover | xargs xdg-open ;;
	position) position ;;
	positions) positions;;
	length) length ;;
	lengths) lengths ;;
	playlist) playlist ;;
	lyrics) lyrics ;;
	progress) media-progress-bar;;
	*) doc ;;
	esac

