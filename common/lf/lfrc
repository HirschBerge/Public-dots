set ignorecase true
set icons true
set preview true
set cleaner '~/.config/lf/scripts/cleaner_kitty.sh'
set previewer ~/.config/lf/scripts/previewer_kitty.sh
# set previewer '~/.config/lf/scope'

# Archive bindings
cmd unarchive ${{
 atool --extract "$f" || echo "Unsupported format"
  # case "$f" in
  #     *.zip) unzip "$f" ;;
  #     *.tar.gz) tar -xzvf "$f" ;;
  #     *.tar.bz2) tar -xjvf "$f" ;;
  #     *.tar) tar -xvf "$f" ;;
  #     *) echo "Unsupported format" ;;
  # esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  nvim $ans
}}

cmd zip %zip -r "$f.zip" "$fx"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
  notify-send " ðŸš® Trashing." "$file Moved to Trash"
}}
cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd fzf_jump ${{
  res="$(fd -H -d 3 |sed 's@^\./@@'|fzf --reverse --prompt 'Jump to location: ')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f
map y

# Basic Functions
map . set hidden!
map DD delete
map Y copy
map P paste
map <esc> quit
map X cut
map <enter> open
map mf mkfile
map md mkdir
map ch chmod
map br $vimv $fx
map r rename
map H top
map L bottom
map R reload
map c clear
map U unselect
map <c-t> fzf_jump

# Trash Mappings
map dd trash
# map tc clear_trash
map tr restore_trash

