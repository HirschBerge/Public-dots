(defvar home_dir "/home/$USER/.config/eww/Scripts")
(defpoll clipboard_content :interval "1s"
        `/home/$USER/.config/eww/Scripts/clipboard_manager.py`)
(deflisten volume `bash $HOME/.config/eww/scripts/audio --get-vol`)
(deflisten vol_icon `bash $HOME/.config/eww/scripts/audio --get-volicon`)
(defpoll battery :interval "30s"
	`/home/$USER/.config/eww/Scripts/battery.py`)
;; System
(defpoll remaining :interval "20s" "acpi -b | awk -F\", \" '{ print $2 \" \" $3 }'")
(defpoll memory :interval "5s"
    "$HOME/.config/eww/scripts/memory")
(defpoll cpu :interval "5s"
    "$HOME/.config/eww/scripts/cpu")
(defpoll temp :initial 30 :interval "10s" `sensors | rg temp1 | rg -o "\\d+.\\d+" | head -1`)
(defpoll oxidized_weather :initial "..." :interval "1m" `$HOME/.local/bin/weather_app --bar`)
(defpoll PR_TRACKER :initial "..." :interval "20m" `pr_tracker`)
(defpoll quote :interval "24h" "$HOME/.config/eww/scripts/quotes --quote-and-quotee")
(defpoll IP_ADDR :interval "1m" "ip -br a |rg UP | awk '/enp7/ {print $3 }'")
(defpoll window :interval "0.5s" "$HOME/.config/eww/scripts/window-title.sh")
(defpoll wifi :interval "3s"
        `/home/$USER/.config/eww/Scripts/wifi.py`)
(defvar idle_state "󱄅")
(deflisten workspaces :initial "(box (label :text \"󰄯  󰄰  󰄰  󰄰  󰄰\" ))"
	`/home/$USER/.config/eww/Scripts/workspaces.py`)
(deflisten song_status :initial "Select playlist to begin"
        `/home/$USER/.config/eww/Scripts/song_status.py`)
(defvar wm   "Hypr")
(defpoll shell :interval "1h" "echo $SHELL | awk -F'/' '{print $NF}'")
(defpoll term :interval "1h" "notify-send $(echo $TERM | awk -F'-' '{print $NF}')")
(defpoll uptime :interval "1m" "bash ./scripts/better_uptime.sh $(cut -f1 -d. /proc/uptime)")
(defpoll packages_uniq :initial "..." :interval "10m" "bash $HOME/.config/eww/scripts/packages.sh") 
(defpoll time :interval "5s" "date '+%H:%M'")
(defpoll date :interval "1m" "date '+%D'")
(defwindow bar
	:monitor 0
	:windowtype "dock"
	:geometry (geometry 
			:width "95%"
			:height "2%"
			:anchor "bottom center"
			)
	:exclusive true	
	(box :class "main-container"
    (functions)
    (sliders)
    (network-down)
    (network-up)
    ;; (network)
    ;; (weather)
    (pr_tracker)
    (system)
    (info)
    (clock)
	)
)
(defwidget info []
  (box :class "info-box-outer" :orientation "h" :space-evenly true :halign "center"
    (box :class "info-box-top" :orientation "v" :space-evenly false
      (box :class "info-box-inner" :orientation "h" :space-evenly false
        (box :class "info-box-left" :orientation "v" :space-evenly false
          (label :class "info-icon" :text " :")
          (label :class "info-text" :halign "start" :text "${wm} ")
        )
        (box :class "info-box-right" :orientation "v" :space-evenly false
          (button :class "info-icon"
                  :onclick "kitty ./scripts/rebuild.sh --rebuild"
                  :onrightclick "kitty ./scripts/rebuild.sh --upgrade"
                  :onmiddleclick "./scripts/rebuild.sh --home"
                  :timeout "999999999"
                  :tooltip "Click to Rebuild,middle to home manage, right-click to upgrade."
                  (label :text " :"))
          (label :class "info-text" :halign "start" :text "${packages_uniq}")
        )
        (box :class "info-box-right" :orientation "v" :space-evenly false
          (label :class "info-icon" :text "󰅐 :" :tooltip "${remaining}")
          (label :class "info-text" :halign "start" :text "${uptime}")
        )
      )
    )
  )
)

;; Notifications
(deflisten notifs :initial ""
    `./scripts/notifs.py`)


(defwidget pr_tracker []
  ( box :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false" :halign "center"
    (button
      :onclick "sleep 0.1 ; firefox ${PR_TRACKER.url}"
      :onrightclick "notify-send ${PR_TRACKER.url}"
      ;; :tooltip "Open Dashboard."
    (label
      :class "weatha"
      :text "${PR_TRACKER.master}${PR_TRACKER.small}${PR_TRACKER.nix_pkgs}${PR_TRACKER.unstable}"
      :tooltip "${PR_TRACKER.title}"
    )
    )
  )
)
(defwidget weather []
  (label :space-evenly "true" :halign "start"
    :class "weatha"
    :text "${oxidized_weather}"
    )
)
(defwidget system []
    (box :class "sys_win" :orientation "h" :space-evenly "true" :hexpand "false" :vexpand "false" 
        (box :class "sys_cpu_box" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false"
            (box :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
                (circular-progress 
                    :value cpu
                    :class "sys_cpu"
                    :thickness 8
                    :tooltip "${EWW_TEMPS.ACPITZ_TEMP1}°C"
                    (label :text "󰻠"
                        :class "sys_icon_cpu"
                        :limit-width 4
                        :wrap false
                        :halign "start"
                    ))
                (label :class "cpu_perc" :valign "center" :halign "start" :text " ${cpu}%")
            )
        )
        (box :class "sys_mem_box" :orientation "v" :space-evenly "false" :hexpand "false" :vexpand "false"
            (box :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "false"
                (circular-progress 
                    :value memory
                    :class "sys_mem"
                    :thickness 8
                    (label :text ""
                        :class "sys_icon_mem"
                        :limit-width 4
                        :wrap false
                        :angle 0.0
                        :halign "center"
                        :tooltip "${round((EWW_RAM.used_mem / 1024 / 1024 / 1000), 1)}GB"
                    ))
                (label :class "mem_perc" :valign "center" :halign "start" :text " ${memory}%")
            )
        )
    )
)
(defwidget clock []
  (box :orientation "h" :space-evenly "false" :hexpand "false" :vexpand "true" :halign "center"
    (label :class "time" :text time :valign "center" :halign "start")
    (button
      :onclick "bash $HOME/.config/eww/scripts/launch_dashboard"
      :tooltip "Open Dashboard."
      (label :class "date" :text date :valign "center" :halign "end"))
    )
)
(defwidget network-up [] 
	(box :class "network" :orientation "h" :space-evenly "false" :spacing 10 :halign "center"
        (box :orientation "h" :class "network-box" 
            (label :text "󰧇" :class "network-up")
        )
        (box :orientation "h" :width 130 
            (graph  :class "network-graph-up"
                    :thickness 2
                    :value {round(EWW_NET.wlo1.NET_UP ,1)}
                    :time-range "2m"
                    :min 10
                    :max 1010
                    :dynamic "true"
                    :line-style "round"
                    :tooltip "${round((EWW_NET.wlo1.NET_UP / 8 ), 1)}MB/s"
            )
	    )
    )
)
(defwidget network-down [] 
	(box :class "network" :orientation "h" :space-evenly "false" :spacing 10 :halign "center"
        (box :orientation "h" :class "network-box" 
            (label :text "󰦿" :width 10 :class "network-down")
        )
        (box :orientation "h" :width 130
            (graph  :class "network-graph-down"
                    :thickness 2
                    :value {round(EWW_NET.wlo1.NET_DOWN,1)}
                    :time-range "2m"
                    :min 1
                    :max 1010
                    :dynamic "true"
                    :line-style "round"
                    :tooltip "${round((EWW_NET.wlo1.NET_DOWN /8 ), 1)}MB/s"
            )
	    )
    )
)

(defvar vol_reveal false)
;; (defvar eww "eww -c $HOME/.dotfiles/shirohebi/eww") ;; NOTE: for testing
(defvar eww "eww -c $HOME/.config/eww")

(defwidget volume []
    (eventbox 
        :onhover "${eww} update vol_reveal=true"
        :onhoverlost "${eww} update vol_reveal=false"
        (box :space-evenly "false" :class "vol-label" :orientation "h" :spacing 5
            (label :class "vol-label" :orientation "h" :space-evenly "false" :text "${vol_icon}")
            (revealer 
                :reveal vol_reveal
                :transition "slideleft"
                :duration "700ms"
                (box :class "vol-control" :orientation "h" :spacing 3
                    ;; Volume Scale Bar
                    (scale 
                        :class "volbar"
                        :value volume
                        :orientation "h"
                        :tooltip "${volume}%"
                        :max 150
                        :min 10
                        :onchange "bash $HOME/.config/eww/scripts/audio --set-vol {}%")
                ))
            (button 
                :class "info-icon" 
                :onclick "$HOME/.config/eww/scripts/audio --toggle-vol"
                :onrightclick "python3 $HOME/.config/eww/scripts/change_dev.py"
                :timeout "999999999"
                :tooltip "Click to toggle volume. Right-click to change device."
                (label :text  "${volume}%"))

            ;; Revealer with Slide Animation
        )))

(defpoll cbrightness :interval "1s" `brightnessctl g`)
(defvar bright_reveal false)
(defwidget brightness []
    (eventbox 
        :onhover "${eww} update bright_reveal=true"
        :onhoverlost "${eww} update bright_reveal=false"
        (box :space-evenly "false" :class "bright-label" :orientation "h" :spacing 5
            (label :class "bright-label" :orientation "h" :space-evenly "false" :text "")
            (revealer 
                :reveal bright_reveal
                :transition "slideleft"
                :duration "700ms"
                (box :class "bright-control" :orientation "h" :spacing 3
                    ;; Brightness Scale Bar
                    (scale 
                        :class "brightbar"
                        :value "${round((cbrightness / 1200), 1)}"
                        :orientation "h"
                        :tooltip "${round((cbrightness / 1200), 1)}%"
                        :max 100
                        :min 0
                        :onchange "brightnessctl s {}%")
                ))
            (button 
                :class "info-icon" 
                (label :text "${(cbrightness / 1200)}%"))
        )))

(defwidget sliders []
    (box :space-evenly "false"
        (volume)
        (brightness)
    )
)
;; (defwidget volume []
;;     (box :class "metric" :orientation "h" :space-evenly "false" :halign "center"
;;         (label :class "vol-label" :orientation "h" :space-evenly "false" :text "")
;;         (scale :min 0
;;             :max 150
;;             :value volume
;;             :orientation "h"
;;             :tooltip "Volume: ${volume}%"
;;             :onclick "$HOME/.config/eww/scripts/volume --toggle-vol"
;;             :onchange "bash $HOME/.config/eww/scripts/audio --set-vol {}%")
;;         (label :class "vol-text" :text "${volume}%")
;;     )
;; )
(defwidget functions []
    (box :class "function-container" :orientation "v" :space-evenly "true" :halign "center"
      (box :class "function-box" :orientation "h" :space-evenly "true" :hexpand "true" :vexpand "false" :spacing 10
            (button :class "idle"
                :onclick "firefox https://search.nixos.org/packages"
                :onmiddleclick "firefox https://mynixos.com/home-manager/options"
                :onrightclick "firefox https://mynixos.com/home-manager/options"
		    "${idle_state}")
            (button :class "screenshot"
                :onclick "sleep 0.1; bash $HOME/.config/hypr/scripts/screenshot --area 2> /dev/null"
                :timeout "500ms"
                :tooltip "Screenshot"
            (label :text "󰹑 " :class "tooltip"))
            (button :class "wallpaper"
                :onclick " waypaper&"
                :onrightclick "bash $HOME/.config/hypr/scripts/wayground.sh 2> /dev/null"
                :tooltip "Wallpaper"
            (label :text " " :class "tooltip"))
            (button :class "keybind"
                :onclick "hyprland_bindings 2> /dev/null"
                :timeout "1000ms"
                :tooltip "Keybindings"
            (label :text " " :class "tooltip"))
            (button :class "logout"
                :onclick "wlogout 2> /dev/null"
                :tooltip "Logout"
            (label :text "󰍃 " :class "logout")
            )
        )
    )
)
(defwidget dash []
    (box :class "dash" :orientation "h" :space-evenly "false")
)
(defwidget network [] 
	(box :class "network-label" :orientation "h" :space-evenly "false" :spacing 10 :halign "center"
        (label :text "${IP_ADDR}")
    )
)

(defwindow notifications
    :monitor 0
    :geometry (geometry :x "20px" :y "20px" :anchor "top right")
    :stacking "overlay"
    (button :class "invisible-close" 
        :onclick `(dbus-send --print-reply --dest=org.freedesktop.Notifications /org/freedesktop/Notifications org.freedesktop.Notifications.ClearNotifications)`
        (box :class "notifs" :orientation "vertical"
            (literal :content notifs)  ;; Display notification content generated by Python
        )
    )
)
